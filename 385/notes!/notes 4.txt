Master Theorem 
Only works for the Divide and Conquer (division by constant of argument)

T(n) a T(n/b) + f(n)
a = # of times the recursive call is made in a single execution of the func
b = constant factor by which the input size is divided
n = amount of work performed in the func excluding my recursive calls

for equation in complexity.cpp 

func0: doesn't apply
func0 uses subtraction

if a < b^d 
   a = b^d 
   a > b^d 

1.)
a =2
b = 2
f(n) = Theta(1) = n^0 => d = 0

2.)
a = 1
b = 2
f(n) Theta(n) => d = 1

a_b^d T(n) is in  Theta(n)

1 < 2^1
3.) 
a = 5
b = 2
f(n) = Theta(n^3) => d = 3

a___b^d  T(n) is in Theta(n^3 lg n)
8 = 2^3


4.) a = 2
b =2 
f(n) theta(n) => d= 1
a ___ b^d	T(n) is in Theta(n lg n)
2 = 2^1

EC from test

a=4 
b=2
f(n) = n => d = 1

4>= 2^1 

