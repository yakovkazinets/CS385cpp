Knapsack problem

1 <= i <= n  	i is the item, w_i is the weight of the ith item, v_i is the value
1 <= j <= w  	j is the knapsack capacity

lose_it = F(i-1, j)

use_it = v_i + F(i - 1,	j - w_i)

Base case:

F(0,j) = 0 for j >= 0
F(i,0) = 0 for i >=0

Recursive definition:

F(i,j) = {	max(lose_it, use_it) if room left (j>= w_i)
	 {
	 {	lose_it 	     if no room left (j < w_i)
	 {
	 {


		items	weight	value
oranges		1	2	12

chocolates	2	1	10

rock		3	3	20
		
small rock	4	2	15


	i\j 	0	1	2	3	4	5

	0	0	0	0	0	0	0

	1   	0	0	12	12	12	12
		
	2	0 	10	12	22	22	22
							
	3	0	10	12	22	30	32				
							
	4	0	10	15	25	30	37


runtime for generating table Theta(nW)
		
		backtracking O(n)

			
							
							
							
							